# BinaryFileFormat (leave this tag as its own magic token!)

# TrackVis file format for *.TRK files (TRacK files)
# TRK FileVersions supported: 1, 2
#
# Version:  v1.1
# Build:    23021012
# Date:     Feb-10 2023, 12:14 PM EST
# Author:   Jochen Weber, NeuroElf.net
# URL/Info: http://neuroelf.net/

# FILE FORMAT
Description:TrackVis Tractography files
EncodingSyntax:ieee-le
Extensions:trk
Magic:|
name             |range       |type    |magic
TRK_TRACKzero    |  1,   6    |hex     |54, 52, 41, 43, 4b, 00
EndMagic

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# figure out endianness first
EXPRE !$BFFREAD           !!!!! ...
fseek(fid, 996, -1); ...
testval = fread(fid, [1, 1], 'uint32=>double'); ...
if testval == 3892510720, ...
    fclose(fid); ...
    fid = fopen($FILENAME, 'r', 'ieee-be'); ...
    testval = 1000; ...
end, ...
if testval ~= 1000, ...
    error('Invalid TRK file.'); ...
end, ...
fseek(fid, 0, -1);

# magic?
EXPRE !$BFFWRITE          !!!!!@FileMagic = ['TRACK' char(0)];
FIELD !                       !char    !char    !1, 6                     !        !FileMagic
EXPRE !$BFFREAD           !!!!!if ~strcmp(@FileMagic(1:5), 'TRACK'), error('Invalid TRK file.'); end

# header
EXPRE !$BFFWRITE          !!!!! ...
@NrOfTracts = numel(@Tracts); ...
$maxspp = @NrOfScalarsPerPoint; ...
$maxppt = @NrOfTractProperties; ...
for trcnt = 1:numel(@Tracts), ...
    $maxspp = max([$maxspp, size(@Tracts(trcnt).Values, 2)]); ...
    $maxppt = max([$maxppt, numel(@Tracts(trcnt).Properties)]); ...
end, ...
@NrOfScalarsPerPoint = $maxspp; ...
@NrOfTractProperties = $maxppt; ...
if numel(@ScalarNames) < $maxspp, ...
    for tscnt = numel(@ScalarNames)+1:min(10, $maxspp), ...
        @ScalarNames{tscnt} = sprintf('Scalar_%d', tscnt); ...
    end, ...
elseif numel(@ScalarNames) > min(10, $maxspp), ...
    @ScalarNames(min(10, $maxspp)+1:end) = []; ...
end, ...
if numel(@TractProperties) < $maxppt, ...
    for tpcnt = numel(@TractProperties)+1:min(10, $maxppt), ...
        @TractProperties{tpcnt} = sprintf('Property_%d', tpcnt); ...
    end, ...
elseif numel(@TractProperties) > $maxppt, ...
    @TractProperties(min(10, $maxppt)+1:end) = []; ...
end
FIELD !                       !int16   !double  !1, 3                     !        !ImageVolumeDims
FIELD !                       !single  !double  !1, 3                     !        !ImageVolumeVoxelSize
FIELD !                       !single  !double  !1, 3                     !        !ImageVolumeOrigin
FIELD !                       !int16   !double  !1, 1                     !        !NrOfScalarsPerPoint

EXPRE !$BFFWRITE          !!!!! ...
c200 = char(zeros(1, 200)); ...
for c200c = 1:numel(@ScalarNames), ...
    c200ml = min(20, numel(@ScalarNames{c200c})); ...
    c200((c200c-1)*20+1:(c200c-1)*20+c200ml) = @ScalarNames{c200c}(1:c200ml); ...
end, ...
fwrite(fid, c200, '*char');
EXPRE !$BFFREAD           !!!!! ...
c200 = fread(fid, [1, 200], '*char'); ...
c200n = 10; ...
@ScalarNames = cell(c200n, 1); ...
for c200c = c200n:-1:1, ...
    c200s = c200((c200c-1)*20+1:c200c*20); ...
    c200s = c200s(double(c200s) > 0); ...
    if numel(c200s) == 0 && c200c == c200n, ...
        c200n = c200n - 1; ...
    elseif numel(c200s) > 0, ...
        @ScalarNames{c200c} = c200s; ...
    end, ...
end, ...
@ScalarNames = @ScalarNames(1:c200n);

FIELD !                       !int16   !double  !1, 1                     !        !NrOfTractProperties

EXPRE !$BFFWRITE          !!!!! ...
c200 = char(zeros(1, 200)); ...
for c200c = 1:numel(@TractProperties), ...
    c200ml = min(20, numel(@TractProperties{c200c})); ...
    c200((c200c-1)*20+1:(c200c-1)*20+c200ml) = @TractProperties{c200c}(1:c200ml); ...
end, ...
fwrite(fid, c200, '*char');
EXPRE !$BFFREAD           !!!!! ...
c200 = fread(fid, [1, 200], '*char'); ...
c200n = 10; ...
@TractProperties = cell(c200n, 1); ...
for c200c = c200n:-1:1, ...
    c200s = c200((c200c-1)*20+1:c200c*20); ...
    c200s = c200s(double(c200s) > 0); ...
    if numel(c200s) == 0 && c200c == c200n, ...
        c200n = c200n - 1; ...
    elseif numel(c200s) > 0, ...
        @TractProperties{c200c} = c200s; ...
    end, ...
end, ...
@TractProperties = @TractProperties(1:c200n);

FIELD !                       !single  !double  !4, 4                     !        !VoxelToRASMatrix
FIELD !                       !char    !char    !1, 444                   !        !Reserved
FIELD !                       !char    !char    !1, 4                     !        !VoxelOrder
FIELD !                       !char    !char    !1, 4                     !        !Paddings2
FIELD !                       !single  !double  !1, 6                     !        !DICOMImageOrientation
FIELD !                       !char    !double  !1, 2                     !        !Paddings1
FIELD !                       !uint8   !double  !1, 3                     !        !InvertXYZ
FIELD !                       !uint8   !double  !1, 1                     !        !SwapXY
FIELD !                       !uint8   !double  !1, 1                     !        !SwapYZ
FIELD !                       !uint8   !double  !1, 1                     !        !SwapZX
FIELD !                       !int32   !double  !1, 1                     !        !NrOfTracts
FIELD !                       !int32   !double  !1, 1                     !        !FileVersion
FIELD !                       !int32   !double  !1, 1                     !        !HeaderSize

# read fibers
EXPRE !                   !!!!!$tdim2 = 3 + @NrOfScalarsPerPoint;
EXPRE !$BFFREAD           !!!!! ...
@Tracts = struct('NrOfPoints', 0, 'Points', zeros(0, 3), 'Values', [], 'Properties', zeros(1, @NrOfTractProperties)); ...
@Tracts = repmat(@Tracts, @NrOfTracts, 1);
BLOOP !                       ! ! !@NrOfTracts ! !TractNr
EXPRE !$BFFWRITE          !!!!! ...
@Tracts($TractNr).Points = cat(2, @Tracts($TractNr).Points, @Tracts($TractNr).Values)'; ...
if size(@Tracts($TractNr).Points, 1) < $tdim2, ...
    @Tracts($TractNr).Points(end+1:$tdim2, :) = 0; ...
elseif size(@Tracts($TractNr).Points, 1) > $tdim2, ...
    @Tracts($TractNr).Points($tdim2+1:end, :) = []; ...
end, ...
@Tracts($TractNr).NrOfPoints = size(@Tracts($TractNr).Points, 2); ...
if numel(@Tracts($TractNr).Properties) < @NrOfTractProperties, ...
    @Tracts($TractNr).Properties(end+1:@NrOfTractProperties) = 0; ...
elseif numel(@Tracts($TractNr).Properties) > @NrOfTractProperties, ...
    @Tracts($TractNr).Properties(@NrOfTractProperties+1:end) = []; ...
end
FIELD !                       !int32   !double  !1, 1                     !2       !Tracts($TractNr).NrOfPoints
EXPRE !                   !!!!!$tdim22 = [$tdim2, @Tracts($TractNr).NrOfPoints];
FIELD !                       !single  !double  !$tdim22                  !        !Tracts($TractNr).Points
EXPRE !$BFFREAD           !!!!! ...
@Tracts($TractNr).Values = @Tracts($TractNr).Points(4:end, :)'; ...
@Tracts($TractNr).Points = @Tracts($TractNr).Points(1:3, :)';
FIELD !                       !single  !double  !1, @NrOfTractProperties  !        !Tracts($TractNr).Properties
ELOOP !                       ! ! !  ! !TractNr

# Read rest of File into REMAININGCONTENT
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

NewFileCode:!
@FileMagic = ['TRACK' char(0)];
@ImageVolumeDims = [256, 256, 256];
@ImageVolumeVoxelSize = [1, 1, 1];
@ImageVolumeOrigin = [128, 128, 128];
@NrOfScalarsPerPoint = 0;
@ScalarNames = cell(0, 1);
@NrOfTractProperties = 0;
@TractProperties = cell(0, 1);
@VoxelToRASMatrix = eye(4);
@Reserved = char(zeros(1, 444));
@VoxelOrder = char([82, 65, 83, 0]);
@Paddings2 = char([0, 0, 0, 0]);
@DICOMImageOrientation = [1, 0, 0, 0, 1, 0];
@Paddings1 = char([0, 0, 0, 0]);
@InvertXYZ = [0, 0, 0];
@SwapXY = 0;
@SwapYZ = 0;
@SwapZX = 0;
@NrOfTracts = 1;
@FileVersion = 2;
@HeaderSize = 1000;
@Tracts = struct('NrOfPoints', 0, 'Points', zeros(0, 3), 'Values', [], 'Properties', zeros(1, @NrOfTractProperties));
EndNewFileCode

